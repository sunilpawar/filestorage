<?php

/**
 * @package CRM
 * @copyright CiviCRM LLC https://civicrm.org/licensing
 *
 * Generated from com.skvare.filestorage/xml/schema/CRM/Filestorage/FilestorageConfig.xml
 * DO NOT EDIT.  Generated by CRM_Core_CodeGen
 * (GenCodeChecksum:4fc70e337ae625b0048393fe25b331a4)
 */
use CRM_Filestorage_ExtensionUtil as E;

/**
 * Database access object for the FilestorageConfig entity.
 */
class CRM_Filestorage_DAO_FilestorageConfig extends CRM_Core_DAO {
  const EXT = E::LONG_NAME;
  const TABLE_ADDED = '';

  /**
   * Static instance to hold the table name.
   *
   * @var string
   */
  public static $_tableName = 'civicrm_filestorage_config';

  /**
   * Should CiviCRM log any modifications to this table in the civicrm_log table.
   *
   * @var bool
   */
  public static $_log = FALSE;

  /**
   * Unique FilestorageConfig ID
   *
   * @var int|string|null
   *   (SQL type: int unsigned)
   *   Note that values will be retrieved from the database as a string.
   */
  public $id;

  /**
   * Type of storage backend: s3, gcs, azure, spaces, local
   *
   * @var string
   *   (SQL type: varchar(32))
   *   Note that values will be retrieved from the database as a string.
   */
  public $storage_type;

  /**
   * Friendly name for this configuration
   *
   * @var string
   *   (SQL type: varchar(64))
   *   Note that values will be retrieved from the database as a string.
   */
  public $config_name;

  /**
   * JSON configuration: credentials, bucket, region, etc.
   *
   * @var string
   *   (SQL type: text)
   *   Note that values will be retrieved from the database as a string.
   */
  public $config_data;

  /**
   * Is this configuration active?
   *
   * @var bool|string
   *   (SQL type: tinyint)
   *   Note that values will be retrieved from the database as a string.
   */
  public $is_active;

  /**
   * Is this the default storage for new files?
   *
   * @var bool|string
   *   (SQL type: tinyint)
   *   Note that values will be retrieved from the database as a string.
   */
  public $is_default;

  /**
   * JSON rules for which file types use this storage
   *
   * @var string|null
   *   (SQL type: text)
   *   Note that values will be retrieved from the database as a string.
   */
  public $file_type_rules;

  /**
   * When this configuration was created
   *
   * @var string
   *   (SQL type: datetime)
   *   Note that values will be retrieved from the database as a string.
   */
  public $created_date;

  /**
   * When this configuration was last modified
   *
   * @var string
   *   (SQL type: timestamp)
   *   Note that values will be retrieved from the database as a string.
   */
  public $modified_date;

  /**
   * Class constructor.
   */
  public function __construct() {
    $this->__table = 'civicrm_filestorage_config';
    parent::__construct();
  }

  /**
   * Returns localized title of this entity.
   *
   * @param bool $plural
   *   Whether to return the plural version of the title.
   */
  public static function getEntityTitle($plural = FALSE) {
    return $plural ? E::ts('Filestorage Configs') : E::ts('Filestorage Config');
  }

  /**
   * Returns all the column names of this table
   *
   * @return array
   */
  public static function &fields() {
    if (!isset(Civi::$statics[__CLASS__]['fields'])) {
      Civi::$statics[__CLASS__]['fields'] = [
        'id' => [
          'name' => 'id',
          'type' => CRM_Utils_Type::T_INT,
          'title' => E::ts('Storage Config ID'),
          'description' => E::ts('Unique FilestorageConfig ID'),
          'required' => TRUE,
          'usage' => [
            'import' => FALSE,
            'export' => FALSE,
            'duplicate_matching' => FALSE,
            'token' => FALSE,
          ],
          'where' => 'civicrm_filestorage_config.id',
          'table_name' => 'civicrm_filestorage_config',
          'entity' => 'FilestorageConfig',
          'bao' => 'CRM_Filestorage_DAO_FilestorageConfig',
          'localizable' => 0,
          'html' => [
            'type' => 'Number',
          ],
          'readonly' => TRUE,
          'add' => NULL,
        ],
        'storage_type' => [
          'name' => 'storage_type',
          'type' => CRM_Utils_Type::T_STRING,
          'title' => E::ts('Storage Type'),
          'description' => E::ts('Type of storage backend: s3, gcs, azure, spaces, local'),
          'required' => TRUE,
          'maxlength' => 32,
          'size' => CRM_Utils_Type::MEDIUM,
          'usage' => [
            'import' => FALSE,
            'export' => FALSE,
            'duplicate_matching' => FALSE,
            'token' => FALSE,
          ],
          'where' => 'civicrm_filestorage_config.storage_type',
          'table_name' => 'civicrm_filestorage_config',
          'entity' => 'FilestorageConfig',
          'bao' => 'CRM_Filestorage_DAO_FilestorageConfig',
          'localizable' => 0,
          'html' => [
            'type' => 'Select',
            'label' => E::ts("Storage Type"),
          ],
          'pseudoconstant' => [
            'callback' => 'CRM_Filestorage_BAO_FileStorage::getStorageTypes',
          ],
          'add' => '1.0',
        ],
        'config_name' => [
          'name' => 'config_name',
          'type' => CRM_Utils_Type::T_STRING,
          'title' => E::ts('Configuration Name'),
          'description' => E::ts('Friendly name for this configuration'),
          'required' => TRUE,
          'maxlength' => 64,
          'size' => CRM_Utils_Type::BIG,
          'usage' => [
            'import' => FALSE,
            'export' => FALSE,
            'duplicate_matching' => FALSE,
            'token' => FALSE,
          ],
          'where' => 'civicrm_filestorage_config.config_name',
          'table_name' => 'civicrm_filestorage_config',
          'entity' => 'FilestorageConfig',
          'bao' => 'CRM_Filestorage_DAO_FilestorageConfig',
          'localizable' => 0,
          'html' => [
            'type' => 'Text',
            'label' => E::ts("Name"),
          ],
          'add' => '1.0',
        ],
        'config_data' => [
          'name' => 'config_data',
          'type' => CRM_Utils_Type::T_TEXT,
          'title' => E::ts('Configuration Data'),
          'description' => E::ts('JSON configuration: credentials, bucket, region, etc.'),
          'required' => TRUE,
          'rows' => 10,
          'cols' => 60,
          'usage' => [
            'import' => FALSE,
            'export' => FALSE,
            'duplicate_matching' => FALSE,
            'token' => FALSE,
          ],
          'where' => 'civicrm_filestorage_config.config_data',
          'table_name' => 'civicrm_filestorage_config',
          'entity' => 'FilestorageConfig',
          'bao' => 'CRM_Filestorage_DAO_FilestorageConfig',
          'localizable' => 0,
          'serialize' => self::SERIALIZE_JSON,
          'html' => [
            'type' => 'TextArea',
          ],
          'add' => '1.0',
        ],
        'is_active' => [
          'name' => 'is_active',
          'type' => CRM_Utils_Type::T_BOOLEAN,
          'title' => E::ts('Is Active'),
          'description' => E::ts('Is this configuration active?'),
          'required' => TRUE,
          'usage' => [
            'import' => FALSE,
            'export' => FALSE,
            'duplicate_matching' => FALSE,
            'token' => FALSE,
          ],
          'where' => 'civicrm_filestorage_config.is_active',
          'default' => '1',
          'table_name' => 'civicrm_filestorage_config',
          'entity' => 'FilestorageConfig',
          'bao' => 'CRM_Filestorage_DAO_FilestorageConfig',
          'localizable' => 0,
          'html' => [
            'type' => 'CheckBox',
            'label' => E::ts("Active"),
          ],
          'add' => '1.0',
        ],
        'is_default' => [
          'name' => 'is_default',
          'type' => CRM_Utils_Type::T_BOOLEAN,
          'title' => E::ts('Is Default'),
          'description' => E::ts('Is this the default storage for new files?'),
          'required' => TRUE,
          'usage' => [
            'import' => FALSE,
            'export' => FALSE,
            'duplicate_matching' => FALSE,
            'token' => FALSE,
          ],
          'where' => 'civicrm_filestorage_config.is_default',
          'default' => '0',
          'table_name' => 'civicrm_filestorage_config',
          'entity' => 'FilestorageConfig',
          'bao' => 'CRM_Filestorage_DAO_FilestorageConfig',
          'localizable' => 0,
          'html' => [
            'type' => 'CheckBox',
            'label' => E::ts("Default"),
          ],
          'add' => '1.0',
        ],
        'file_type_rules' => [
          'name' => 'file_type_rules',
          'type' => CRM_Utils_Type::T_TEXT,
          'title' => E::ts('File Type Rules'),
          'description' => E::ts('JSON rules for which file types use this storage'),
          'rows' => 5,
          'cols' => 60,
          'usage' => [
            'import' => FALSE,
            'export' => FALSE,
            'duplicate_matching' => FALSE,
            'token' => FALSE,
          ],
          'where' => 'civicrm_filestorage_config.file_type_rules',
          'table_name' => 'civicrm_filestorage_config',
          'entity' => 'FilestorageConfig',
          'bao' => 'CRM_Filestorage_DAO_FilestorageConfig',
          'localizable' => 0,
          'serialize' => self::SERIALIZE_JSON,
          'html' => [
            'type' => 'TextArea',
          ],
          'add' => '1.0',
        ],
        'created_date' => [
          'name' => 'created_date',
          'type' => CRM_Utils_Type::T_DATE + CRM_Utils_Type::T_TIME,
          'title' => E::ts('Created Date'),
          'description' => E::ts('When this configuration was created'),
          'required' => TRUE,
          'usage' => [
            'import' => FALSE,
            'export' => FALSE,
            'duplicate_matching' => FALSE,
            'token' => FALSE,
          ],
          'where' => 'civicrm_filestorage_config.created_date',
          'default' => 'CURRENT_TIMESTAMP',
          'table_name' => 'civicrm_filestorage_config',
          'entity' => 'FilestorageConfig',
          'bao' => 'CRM_Filestorage_DAO_FilestorageConfig',
          'localizable' => 0,
          'html' => [
            'type' => 'Select Date',
            'formatType' => 'activityDateTime',
          ],
          'add' => '1.0',
        ],
        'modified_date' => [
          'name' => 'modified_date',
          'type' => CRM_Utils_Type::T_TIMESTAMP,
          'title' => E::ts('Modified Date'),
          'description' => E::ts('When this configuration was last modified'),
          'required' => FALSE,
          'usage' => [
            'import' => FALSE,
            'export' => FALSE,
            'duplicate_matching' => FALSE,
            'token' => FALSE,
          ],
          'where' => 'civicrm_filestorage_config.modified_date',
          'default' => 'CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP',
          'table_name' => 'civicrm_filestorage_config',
          'entity' => 'FilestorageConfig',
          'bao' => 'CRM_Filestorage_DAO_FilestorageConfig',
          'localizable' => 0,
          'html' => [
            'type' => 'Select Date',
            'formatType' => 'activityDateTime',
          ],
          'add' => '1.0',
        ],
      ];
      CRM_Core_DAO_AllCoreTables::invoke(__CLASS__, 'fields_callback', Civi::$statics[__CLASS__]['fields']);
    }
    return Civi::$statics[__CLASS__]['fields'];
  }

  /**
   * Returns the list of fields that can be imported
   *
   * @param bool $prefix
   *
   * @return array
   */
  public static function &import($prefix = FALSE) {
    $r = CRM_Core_DAO_AllCoreTables::getImports(__CLASS__, 'filestorage_config', $prefix, []);
    return $r;
  }

  /**
   * Returns the list of fields that can be exported
   *
   * @param bool $prefix
   *
   * @return array
   */
  public static function &export($prefix = FALSE) {
    $r = CRM_Core_DAO_AllCoreTables::getExports(__CLASS__, 'filestorage_config', $prefix, []);
    return $r;
  }

  /**
   * Returns the list of indices
   *
   * @param bool $localize
   *
   * @return array
   */
  public static function indices($localize = TRUE) {
    $indices = [
      'unique_config_name' => [
        'name' => 'unique_config_name',
        'field' => [
          0 => 'config_name',
        ],
        'localizable' => FALSE,
        'unique' => TRUE,
        'sig' => 'civicrm_filestorage_config::1::config_name',
      ],
      'idx_storage_type' => [
        'name' => 'idx_storage_type',
        'field' => [
          0 => 'storage_type',
        ],
        'localizable' => FALSE,
        'sig' => 'civicrm_filestorage_config::0::storage_type',
      ],
      'idx_is_active' => [
        'name' => 'idx_is_active',
        'field' => [
          0 => 'is_active',
        ],
        'localizable' => FALSE,
        'sig' => 'civicrm_filestorage_config::0::is_active',
      ],
      'idx_is_default' => [
        'name' => 'idx_is_default',
        'field' => [
          0 => 'is_default',
        ],
        'localizable' => FALSE,
        'sig' => 'civicrm_filestorage_config::0::is_default',
      ],
    ];
    return ($localize && !empty($indices)) ? CRM_Core_DAO_AllCoreTables::multilingualize(__CLASS__, $indices) : $indices;
  }

}
