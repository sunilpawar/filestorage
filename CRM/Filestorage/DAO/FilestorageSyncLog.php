<?php

/**
 * @package CRM
 * @copyright CiviCRM LLC https://civicrm.org/licensing
 *
 * Generated from com.skvare.filestorage/xml/schema/CRM/Filestorage/FilestorageSyncLog.xml
 * DO NOT EDIT.  Generated by CRM_Core_CodeGen
 * (GenCodeChecksum:40ae4c75c1a7dbc21f08dde582fd3f9e)
 */
use CRM_Filestorage_ExtensionUtil as E;

/**
 * Database access object for the FilestorageSyncLog entity.
 */
class CRM_Filestorage_DAO_FilestorageSyncLog extends CRM_Core_DAO {
  const EXT = E::LONG_NAME;
  const TABLE_ADDED = '';

  /**
   * Static instance to hold the table name.
   *
   * @var string
   */
  public static $_tableName = 'civicrm_filestorage_sync_log';

  /**
   * Should CiviCRM log any modifications to this table in the civicrm_log table.
   *
   * @var bool
   */
  public static $_log = FALSE;

  /**
   * Unique FilestorageSyncLog ID
   *
   * @var int|string|null
   *   (SQL type: int unsigned)
   *   Note that values will be retrieved from the database as a string.
   */
  public $id;

  /**
   * FK to civicrm_file
   *
   * @var int|string
   *   (SQL type: int unsigned)
   *   Note that values will be retrieved from the database as a string.
   */
  public $file_id;

  /**
   * Operation type: upload, download, delete, verify, sync, migrate
   *
   * @var string
   *   (SQL type: varchar(32))
   *   Note that values will be retrieved from the database as a string.
   */
  public $operation;

  /**
   * Source storage type
   *
   * @var string|null
   *   (SQL type: varchar(32))
   *   Note that values will be retrieved from the database as a string.
   */
  public $source_storage;

  /**
   * Target storage type
   *
   * @var string|null
   *   (SQL type: varchar(32))
   *   Note that values will be retrieved from the database as a string.
   */
  public $target_storage;

  /**
   * Operation status: success, failed, skipped
   *
   * @var string
   *   (SQL type: varchar(32))
   *   Note that values will be retrieved from the database as a string.
   */
  public $status;

  /**
   * Error details if status is failed
   *
   * @var string|null
   *   (SQL type: text)
   *   Note that values will be retrieved from the database as a string.
   */
  public $error_message;

  /**
   * File size in bytes
   *
   * @var string|null
   *   (SQL type: bigint unsigned)
   *   Note that values will be retrieved from the database as a string.
   */
  public $file_size;

  /**
   * Operation duration in milliseconds
   *
   * @var int|string|null
   *   (SQL type: int)
   *   Note that values will be retrieved from the database as a string.
   */
  public $duration_ms;

  /**
   * When sync was attempted
   *
   * @var string
   *   (SQL type: datetime)
   *   Note that values will be retrieved from the database as a string.
   */
  public $sync_date;

  /**
   * Contact ID who triggered sync
   *
   * @var int|string|null
   *   (SQL type: int unsigned)
   *   Note that values will be retrieved from the database as a string.
   */
  public $created_by;

  /**
   * Class constructor.
   */
  public function __construct() {
    $this->__table = 'civicrm_filestorage_sync_log';
    parent::__construct();
  }

  /**
   * Returns localized title of this entity.
   *
   * @param bool $plural
   *   Whether to return the plural version of the title.
   */
  public static function getEntityTitle($plural = FALSE) {
    return $plural ? E::ts('Filestorage Sync Logs') : E::ts('Filestorage Sync Log');
  }

  /**
   * Returns all the column names of this table
   *
   * @return array
   */
  public static function &fields() {
    if (!isset(Civi::$statics[__CLASS__]['fields'])) {
      Civi::$statics[__CLASS__]['fields'] = [
        'id' => [
          'name' => 'id',
          'type' => CRM_Utils_Type::T_INT,
          'title' => E::ts('ID'),
          'description' => E::ts('Unique FilestorageSyncLog ID'),
          'required' => TRUE,
          'usage' => [
            'import' => FALSE,
            'export' => FALSE,
            'duplicate_matching' => FALSE,
            'token' => FALSE,
          ],
          'where' => 'civicrm_filestorage_sync_log.id',
          'table_name' => 'civicrm_filestorage_sync_log',
          'entity' => 'FilestorageSyncLog',
          'bao' => 'CRM_Filestorage_DAO_FilestorageSyncLog',
          'localizable' => 0,
          'html' => [
            'type' => 'Number',
          ],
          'readonly' => TRUE,
          'add' => NULL,
        ],
        'file_id' => [
          'name' => 'file_id',
          'type' => CRM_Utils_Type::T_INT,
          'title' => E::ts('File ID'),
          'description' => E::ts('FK to civicrm_file'),
          'required' => TRUE,
          'usage' => [
            'import' => FALSE,
            'export' => FALSE,
            'duplicate_matching' => FALSE,
            'token' => FALSE,
          ],
          'where' => 'civicrm_filestorage_sync_log.file_id',
          'table_name' => 'civicrm_filestorage_sync_log',
          'entity' => 'FilestorageSyncLog',
          'bao' => 'CRM_Filestorage_DAO_FilestorageSyncLog',
          'localizable' => 0,
          'FKClassName' => 'CRM_Core_DAO_File',
          'html' => [
            'type' => 'EntityRef',
            'label' => E::ts("File"),
          ],
          'add' => '1.0',
        ],
        'operation' => [
          'name' => 'operation',
          'type' => CRM_Utils_Type::T_STRING,
          'title' => E::ts('Operation'),
          'description' => E::ts('Operation type: upload, download, delete, verify, sync, migrate'),
          'required' => TRUE,
          'maxlength' => 32,
          'size' => CRM_Utils_Type::MEDIUM,
          'usage' => [
            'import' => FALSE,
            'export' => FALSE,
            'duplicate_matching' => FALSE,
            'token' => FALSE,
          ],
          'where' => 'civicrm_filestorage_sync_log.operation',
          'table_name' => 'civicrm_filestorage_sync_log',
          'entity' => 'FilestorageSyncLog',
          'bao' => 'CRM_Filestorage_DAO_FilestorageSyncLog',
          'localizable' => 0,
          'html' => [
            'type' => 'Select',
            'label' => E::ts("Operation"),
          ],
          'pseudoconstant' => [
            'callback' => 'CRM_Filestorage_BAO_FileStorage::getOperationTypes',
          ],
          'add' => '1.0',
        ],
        'source_storage' => [
          'name' => 'source_storage',
          'type' => CRM_Utils_Type::T_STRING,
          'title' => E::ts('Source Storage'),
          'description' => E::ts('Source storage type'),
          'maxlength' => 32,
          'size' => CRM_Utils_Type::MEDIUM,
          'usage' => [
            'import' => FALSE,
            'export' => FALSE,
            'duplicate_matching' => FALSE,
            'token' => FALSE,
          ],
          'where' => 'civicrm_filestorage_sync_log.source_storage',
          'table_name' => 'civicrm_filestorage_sync_log',
          'entity' => 'FilestorageSyncLog',
          'bao' => 'CRM_Filestorage_DAO_FilestorageSyncLog',
          'localizable' => 0,
          'html' => [
            'type' => 'Text',
            'label' => E::ts("Source Storage"),
          ],
          'add' => '1.0',
        ],
        'target_storage' => [
          'name' => 'target_storage',
          'type' => CRM_Utils_Type::T_STRING,
          'title' => E::ts('Target Storage'),
          'description' => E::ts('Target storage type'),
          'maxlength' => 32,
          'size' => CRM_Utils_Type::MEDIUM,
          'usage' => [
            'import' => FALSE,
            'export' => FALSE,
            'duplicate_matching' => FALSE,
            'token' => FALSE,
          ],
          'where' => 'civicrm_filestorage_sync_log.target_storage',
          'table_name' => 'civicrm_filestorage_sync_log',
          'entity' => 'FilestorageSyncLog',
          'bao' => 'CRM_Filestorage_DAO_FilestorageSyncLog',
          'localizable' => 0,
          'html' => [
            'type' => 'Text',
            'label' => E::ts("Target Storage"),
          ],
          'add' => '1.0',
        ],
        'status' => [
          'name' => 'status',
          'type' => CRM_Utils_Type::T_STRING,
          'title' => E::ts('Status'),
          'description' => E::ts('Operation status: success, failed, skipped'),
          'required' => TRUE,
          'maxlength' => 32,
          'size' => CRM_Utils_Type::MEDIUM,
          'usage' => [
            'import' => FALSE,
            'export' => FALSE,
            'duplicate_matching' => FALSE,
            'token' => FALSE,
          ],
          'where' => 'civicrm_filestorage_sync_log.status',
          'table_name' => 'civicrm_filestorage_sync_log',
          'entity' => 'FilestorageSyncLog',
          'bao' => 'CRM_Filestorage_DAO_FilestorageSyncLog',
          'localizable' => 0,
          'html' => [
            'type' => 'Select',
            'label' => E::ts("Status"),
          ],
          'pseudoconstant' => [
            'callback' => 'CRM_Filestorage_BAO_FileStorage::getStatusTypes',
          ],
          'add' => '1.0',
        ],
        'error_message' => [
          'name' => 'error_message',
          'type' => CRM_Utils_Type::T_TEXT,
          'title' => E::ts('Error Message'),
          'description' => E::ts('Error details if status is failed'),
          'rows' => 4,
          'cols' => 60,
          'usage' => [
            'import' => FALSE,
            'export' => FALSE,
            'duplicate_matching' => FALSE,
            'token' => FALSE,
          ],
          'where' => 'civicrm_filestorage_sync_log.error_message',
          'table_name' => 'civicrm_filestorage_sync_log',
          'entity' => 'FilestorageSyncLog',
          'bao' => 'CRM_Filestorage_DAO_FilestorageSyncLog',
          'localizable' => 0,
          'html' => [
            'type' => 'TextArea',
          ],
          'add' => '1.0',
        ],
        'file_size' => [
          'name' => 'file_size',
          'type' => CRM_Utils_Type::T_INT,
          'title' => E::ts('File Size'),
          'description' => E::ts('File size in bytes'),
          'usage' => [
            'import' => FALSE,
            'export' => FALSE,
            'duplicate_matching' => FALSE,
            'token' => FALSE,
          ],
          'where' => 'civicrm_filestorage_sync_log.file_size',
          'table_name' => 'civicrm_filestorage_sync_log',
          'entity' => 'FilestorageSyncLog',
          'bao' => 'CRM_Filestorage_DAO_FilestorageSyncLog',
          'localizable' => 0,
          'html' => [
            'type' => 'Number',
            'label' => E::ts("File Size (bytes)"),
          ],
          'add' => '1.0',
        ],
        'duration_ms' => [
          'name' => 'duration_ms',
          'type' => CRM_Utils_Type::T_INT,
          'title' => E::ts('Duration (ms)'),
          'description' => E::ts('Operation duration in milliseconds'),
          'usage' => [
            'import' => FALSE,
            'export' => FALSE,
            'duplicate_matching' => FALSE,
            'token' => FALSE,
          ],
          'where' => 'civicrm_filestorage_sync_log.duration_ms',
          'table_name' => 'civicrm_filestorage_sync_log',
          'entity' => 'FilestorageSyncLog',
          'bao' => 'CRM_Filestorage_DAO_FilestorageSyncLog',
          'localizable' => 0,
          'html' => [
            'type' => 'Number',
            'label' => E::ts("Duration (ms)"),
          ],
          'add' => '1.0',
        ],
        'sync_date' => [
          'name' => 'sync_date',
          'type' => CRM_Utils_Type::T_DATE + CRM_Utils_Type::T_TIME,
          'title' => E::ts('Sync Date'),
          'description' => E::ts('When sync was attempted'),
          'required' => TRUE,
          'usage' => [
            'import' => FALSE,
            'export' => FALSE,
            'duplicate_matching' => FALSE,
            'token' => FALSE,
          ],
          'where' => 'civicrm_filestorage_sync_log.sync_date',
          'default' => 'CURRENT_TIMESTAMP',
          'table_name' => 'civicrm_filestorage_sync_log',
          'entity' => 'FilestorageSyncLog',
          'bao' => 'CRM_Filestorage_DAO_FilestorageSyncLog',
          'localizable' => 0,
          'html' => [
            'type' => 'Select Date',
            'formatType' => 'activityDateTime',
          ],
          'add' => '1.0',
        ],
        'created_by' => [
          'name' => 'created_by',
          'type' => CRM_Utils_Type::T_INT,
          'title' => E::ts('Created By'),
          'description' => E::ts('Contact ID who triggered sync'),
          'usage' => [
            'import' => FALSE,
            'export' => FALSE,
            'duplicate_matching' => FALSE,
            'token' => FALSE,
          ],
          'where' => 'civicrm_filestorage_sync_log.created_by',
          'table_name' => 'civicrm_filestorage_sync_log',
          'entity' => 'FilestorageSyncLog',
          'bao' => 'CRM_Filestorage_DAO_FilestorageSyncLog',
          'localizable' => 0,
          'FKClassName' => 'CRM_Contact_DAO_Contact',
          'html' => [
            'type' => 'EntityRef',
            'label' => E::ts("Created By"),
          ],
          'add' => '1.0',
        ],
      ];
      CRM_Core_DAO_AllCoreTables::invoke(__CLASS__, 'fields_callback', Civi::$statics[__CLASS__]['fields']);
    }
    return Civi::$statics[__CLASS__]['fields'];
  }

  /**
   * Returns the list of fields that can be imported
   *
   * @param bool $prefix
   *
   * @return array
   */
  public static function &import($prefix = FALSE) {
    $r = CRM_Core_DAO_AllCoreTables::getImports(__CLASS__, 'filestorage_sync_log', $prefix, []);
    return $r;
  }

  /**
   * Returns the list of fields that can be exported
   *
   * @param bool $prefix
   *
   * @return array
   */
  public static function &export($prefix = FALSE) {
    $r = CRM_Core_DAO_AllCoreTables::getExports(__CLASS__, 'filestorage_sync_log', $prefix, []);
    return $r;
  }

  /**
   * Returns the list of indices
   *
   * @param bool $localize
   *
   * @return array
   */
  public static function indices($localize = TRUE) {
    $indices = [
      'idx_file_id' => [
        'name' => 'idx_file_id',
        'field' => [
          0 => 'file_id',
        ],
        'localizable' => FALSE,
        'sig' => 'civicrm_filestorage_sync_log::0::file_id',
      ],
      'idx_status' => [
        'name' => 'idx_status',
        'field' => [
          0 => 'status',
        ],
        'localizable' => FALSE,
        'sig' => 'civicrm_filestorage_sync_log::0::status',
      ],
      'idx_sync_date' => [
        'name' => 'idx_sync_date',
        'field' => [
          0 => 'sync_date',
        ],
        'localizable' => FALSE,
        'sig' => 'civicrm_filestorage_sync_log::0::sync_date',
      ],
    ];
    return ($localize && !empty($indices)) ? CRM_Core_DAO_AllCoreTables::multilingualize(__CLASS__, $indices) : $indices;
  }

}
